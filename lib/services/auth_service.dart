import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:flutter/foundation.dart'; // –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è debugPrint

class AuthService {
  static final _supabase = Supabase.instance.client;

  /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ e-mail –∏ –ø–∞—Ä–æ–ª—é —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  static Future<AuthResponse> signUpWithEmail({
    required String email,
    required String password,
    required String name,
    required String phone,
    required String city,
    required String street,
    required String houseNumber,
    required String postalCode,
  }) {
    return _supabase.auth.signUp(
      email: email,
      password: password,
      // —Å—é–¥–∞ –ø–µ—Ä–µ–¥–∞—ë–º –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      data: {
        'first_name': name,
        'phone': phone,
        'city': city,
        'street': street,
        'house_number': houseNumber,
        'postal_code': postalCode,
      },
      // –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å Redirect URL –≤ –≤–∞—à–µ–º Dashboard Supabase
      emailRedirectTo: 'com.citypizza.app://login-callback',
    );
  }

  /// –í—Ö–æ–¥ –ø–æ e-mail –∏ –ø–∞—Ä–æ–ª—é
  static Future<AuthResponse> signInWithEmail({
    required String email,
    required String password,
  }) {
    return _supabase.auth.signInWithPassword(
      email: email,
      password: password,
    );
  }

  /// –í—ã—Ö–æ–¥
  static Future<void> signOut() {
    return _supabase.auth.signOut();
  }

  /// –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  static User? get currentUser => _supabase.auth.currentUser;

  /// –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
  static Session? get currentSession => _supabase.auth.currentSession;

  /// –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  static Stream<AuthChangeEvent> get onAuthStateChange =>
      _supabase.auth.onAuthStateChange.map((e) => e.event);

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_data)
  static Future<Map<String, dynamic>?> getProfile() async {
    final user = currentUser;
    if (user == null) return null;

    try {
      final res = await _supabase
          .from('user_data')
          .select()
          .eq('id', user.id)
          .maybeSingle();
      
      debugPrint('üì¶ AuthService getProfile result: $res');
      return res as Map<String, dynamic>?;
    } catch (e) {
      debugPrint('‚ùå AuthService getProfile error: $e');
      return null;
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_data)
  static Future<void> updateProfile({
    required String name,
    required String phone,
    required String city,
    required String street,
    required String houseNumber,
    required String postalCode,
  }) async {
    final user = currentUser;
    if (user == null) throw Exception('Not authenticated');
    await _supabase.from('user_data').upsert({
      'id': user.id,
      'first_name': name,
      'phone': phone,
      'city': city,
      'street': street,
      'house_number': houseNumber,
      'postal_code': postalCode,
    });
  }
}
