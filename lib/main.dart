// lib/main.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:app_links/app_links.dart';
import 'dart:io'; // –î–æ–±–∞–≤—å—Ç–µ –∏–º–ø–æ—Ä—Ç –¥–ª—è SocketException

import 'services/cart_service.dart';
import 'services/consent_service.dart';
import 'screens/email_login_screen.dart';
import 'screens/reset_password_screen.dart';
import 'screens/welcome_screen.dart';
import 'screens/cookie_settings_screen.dart';
import 'widgets/main_scaffold.dart';
import 'theme/app_theme.dart';
import 'theme/theme_provider.dart';

/// –§–æ–Ω–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—É—à–µ–π, –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–±–∏—Ç–æ –∏–ª–∏ —Å–≤–µ—Ä–Ω—É—Ç–æ
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  await Firebase.initializeApp();
  // –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–¥–µ—Å—å.
  // –ù–æ —Å–∞–º–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏,
  // –µ—Å–ª–∏ payload —Å–æ–¥–µ—Ä–∂–∏—Ç —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å.
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // 1) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
  await Firebase.initializeApp();

  // 2) –§–∏–∫—Å–∏—Ä—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞ –ø–æ—Ä—Ç—Ä–µ—Ç–æ–º
  await SystemChrome.setPreferredOrientations([
    DeviceOrientation.portraitUp,
  ]);

  // 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase
  await Supabase.initialize(
    url: 'https://kwjbfxaoicmvdkrcgmpo.supabase.co',
    anonKey:
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3amJmeGFvaWNtdmRrcmNnbXBvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYwOTAyNjIsImV4cCI6MjA2MTY2NjI2Mn0.MqdObfe9_4_kkWzMAywK7XZkYVVpin2HUts39rmv6lU',
  );
  await CartService.init();

  // 5) –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase Messaging
  // 5.1) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  // 5.2) –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è, –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ foreground
  FirebaseMessaging.onMessage.listen((RemoteMessage message) async {
    // –î–ª—è heads-up —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ Android –∏ iOS:
    // 1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—à –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å payload, –≥–¥–µ –µ—Å—Ç—å notification (title/body).
    // 2. –î–ª—è foreground-—Ä–µ–∂–∏–º–∞ –Ω–∞ Android heads-up —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ notification.channelId —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º –∏ importance=max.
    // 3. –î–ª—è iOS foreground heads-up —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ presentAlert=true –∏ interruptionLevel=critical (–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–∏–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è).

    // –î–ª—è —Ç–µ—Å—Ç–∞: –ø–æ–∫–∞–∂–µ–º –¥–∏–∞–ª–æ–≥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É—à–∞ (—á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø—É—à —Ä–µ–∞–ª—å–Ω–æ –¥–æ—Ö–æ–¥–∏—Ç)
    if (message.notification != null) {
      showDialog(
        context: _MyAppState.navigatorKey.currentContext!,
        builder: (context) => AlertDialog(
          title: Text(message.notification!.title ?? 'Push'),
          content: Text(message.notification!.body ?? ''),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('OK'),
            ),
          ],
        ),
      );
    }
    // ...–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å debugPrint(message.data.toString());
  });

  // 6) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –æ–ø—Ä–∞—à–∏–≤–∞—è —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  final hasLegal = await ConsentService.hasAgreedLegal();
  final hasCookies = await ConsentService.hasAgreedCookies();
  Widget initialPage;
  if (!hasLegal) {
    initialPage = const WelcomeScreen();
  } else if (!hasCookies) {
    initialPage = const CookieSettingsScreen();
  } else {
    initialPage = const MainScaffold();
  }

  runApp(
    ThemeProvider(
      notifier: AppTheme(),
      child: MyApp(initialPage: initialPage),
    ),
  );
}

class MyApp extends StatefulWidget {
  final Widget initialPage;
  const MyApp({Key? key, required this.initialPage}) : super(key: key);

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  final _supabase = Supabase.instance.client;
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: navigatorKey —Ç–µ–ø–µ—Ä—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  static final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();
  late final AppLinks _appLinks;

  @override
  void initState() {
    super.initState();
    _initAppLinks();
    _listenAuthChanges();
    _listenTokenRefresh();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _saveFcmToken();
    });
    _checkDiscountNotifications();
  }

  void _listenAuthChanges() {
    _supabase.auth.onAuthStateChange.listen((_) {
      _saveFcmToken();
    });
  }

  void _listenTokenRefresh() {
    FirebaseMessaging.instance.onTokenRefresh.listen(_upsertFcmToken);
  }

  void _initAppLinks() async {
    _appLinks = AppLinks();
    final uri = await _appLinks.getInitialAppLink();
    if (uri != null) await _handleIncomingLink(uri);
    _appLinks.uriLinkStream.listen((u) {
      if (u != null) _handleIncomingLink(u);
    });
  }

  Future<void> _handleIncomingLink(Uri uri) async {
    final code = uri.queryParameters['code'];
    if (code != null) {
      await _supabase.auth.exchangeCodeForSession(code).catchError((_) {});
    }
    final at = uri.queryParameters['access_token'];
    if (at != null) {
      await _supabase.auth.setSession(at).catchError((_) {});
    }
    if (uri.scheme == 'citypizza' && uri.host == 'reset-password') {
      navigatorKey.currentState?.pushNamed('reset_password');
    }
  }

  Future<void> _saveFcmToken() async {
    final user = _supabase.auth.currentUser;
    if (user == null) return;
    final token = await FirebaseMessaging.instance.getToken();
    if (token != null) {
      await _upsertFcmToken(token);
      debugPrint('‚úÖ FCM token saved on init');
    }
  }

  Future<void> _upsertFcmToken(String token) async {
    try {
      await _supabase
          .from('user_tokens')
          .upsert(
            {'user_id': _supabase.auth.currentUser!.id, 'fcm_token': token},
            onConflict: 'user_id',
          )
          .select();
      debugPrint('üõ∞Ô∏è Upsert FCM token: $token');
    } catch (e) {
      debugPrint('‚ùå Failed to upsert token: $e');
    }
  }

  Future<void> _checkDiscountNotifications() async {
    await Future.delayed(const Duration(milliseconds: 600));
    final userId = _supabase.auth.currentUser?.id;
    await checkAndNotifyDiscounts(userId);
  }

  @override
  Widget build(BuildContext context) {
    final appTheme = ThemeProvider.of(context);
    return MaterialApp(
      navigatorKey: navigatorKey, // –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª—é—á
      debugShowCheckedModeBanner: false,
      title: 'City Pizza',
      theme: ThemeData(
        scaffoldBackgroundColor: appTheme.backgroundColor,
        primaryColor: appTheme.primaryColor,
        colorScheme: ColorScheme.fromSeed(
          seedColor: appTheme.primaryColor,
          brightness: appTheme.backgroundColor.computeLuminance() > 0.5 ? Brightness.light : Brightness.dark,
        ),
        useMaterial3: true,
      ),
      home: widget.initialPage,
      routes: {
        'reset_password': (_) => const ResetPasswordScreen(),
        'tab_0': (_) => const EmailLoginScreen(),
      },
    );
  }
}

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∏–∂–µ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

Future<List<Map<String, dynamic>>> fetchApplicableDiscounts(
    String? userId) async {
  try {
    final now = DateTime.now().toIso8601String();
    final res = await Supabase.instance.client
        .from('discounts')
        .select()
        .eq('active', true)
        .lte('start_at', now)
        .order('start_at', ascending: false);
    return (res as List).cast<Map<String, dynamic>>().where((d) {
      return d['user_id'] == null || d['user_id'] == userId;
    }).toList();
  } on SocketException {
    // –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    return [];
  } catch (e) {
    // –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî —Ç–æ–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    return [];
  }
}

Future<void> checkAndNotifyDiscounts(String? userId) async {
  try {
    final prefs = await SharedPreferences.getInstance();
    final shownIds = prefs.getStringList('shown_discount_ids') ?? [];
    final discounts = await fetchApplicableDiscounts(userId);
    for (final d in discounts) {
      final id = d['id'].toString();
      if (!shownIds.contains(id)) {
        // await showDiscountNotification(
        //   d['name'] ?? 'Neues Angebot',
        //   (d['description'] ?? '').toString(),
        // );
        shownIds.add(id);
      }
    }
    await prefs.setStringList('shown_discount_ids', shownIds);
  } on SocketException {
    // –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    return;
  } catch (e) {
    // –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    return;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã, —Ç—è–∂–µ–ª—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å –ø–æ—Ç–æ–∫–∞–º–∏/–ø–ª–∞–≥–∏–Ω–∞–º–∏:

// 1. –ù–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤: 
// –í main.dart –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ while(true), for(;;) –∏–ª–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –±–µ–∑ –≤—ã—Ö–æ–¥–∞.

// 2. –ù–µ—Ç —Ç—è–∂–µ–ª—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ main isolate:
// –í—Å–µ —Ç—è–∂–µ–ª—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase, Supabase, SharedPreferences, CartService, –ª–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è) –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ await.
// –ù–µ—Ç –±–æ–ª—å—à–∏—Ö —Ü–∏–∫–ª–æ–≤ –∏–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –≤ build –∏–ª–∏ initState.

// 3. –ù–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–∞–º–∏/–ø–ª–∞–≥–∏–Ω–∞–º–∏:
// –í—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ (FirebaseMessaging, AppLinks) –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∏ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–≤–æ–∏—Ö –∫–æ–ª–±—ç–∫–∞—Ö.
// –ù–µ—Ç —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è Isolate –∏–ª–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–∞–º–∏.
// –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ SharedPreferences, Supabase, Firebase ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ.

// 4. –ù–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è setState –∏–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ setState –≤ —Ü–∏–∫–ª–µ.

// 5. –ù–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö Future.delayed –∏–ª–∏ Timer.periodic –±–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª—è.

// 6. –ù–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ Navigator –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ª–æ–≤—É—à–µ–∫.

// 7. –ù–µ—Ç —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ build-–º–µ—Ç–æ–¥–∞—Ö ‚Äî —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π MaterialApp –∏ —Ä–æ—É—Ç–∏–Ω–≥.
